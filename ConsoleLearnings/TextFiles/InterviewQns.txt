1.What is the difference between ref & out parameters?

An argument passed as ref must be initialized before passing to the method whereas out parameter needs not to be initialized before passing to a method.

2.What is the difference between “constant” and “readonly” variables in C#?

“Const” keyword is used for making an entity constant. We cannot modify the value later in the code. Value assigning is mandatory to constant variables.
“readonly” variable value can be changed during runtime and value to readonly variables can be assigned in the constructor or at the time of declaration.

3.What is the difference between “dispose” and “finalize” variables in C#?

Dispose - This method uses interface – “IDisposable” interface and it will free up both managed and unmanaged codes like – database connection, files etc.
Finalize - This method is called internally unlike Dispose method which is called explicitly. It is called by garbage collector and can’t be called from the code.

4. What is the difference between “throw ex” and “throw” methods in C#?
“throw ex” will replace the stack trace of the exception with stack trace info of re throw point.
“throw” will preserve the original stack trace info.

5.System namespace : mscorlib.dll

6.What is the difference between "Func","Action","Predicate" in C#?

Func => It takes one or more input parameters and returns something.
Action => It takes one or more input parameters and returns nothing.
Predicate => It takes one or more input parameters and returns bool value.

7.What is the difference between methods – “System.Array.Clone()” and “System.Array.CopyTo()” in C#?

“CopyTo()” method can be used to copy the elements of one array to other. 
“Clone()” method is used to create a new array to contain all the elements which are in the original array.

8. What is the difference between “as” and “is” operators in C#?

“as” operator is used for casting object to type or class.
“is” operator is used for checking the object with type and this will return a Boolean value.

9.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Generics
{
    class A
    {
        public virtual void show()
        {
            Console.WriteLine("A");
            Console.ReadLine();
        }
    }

    class B : A
    {
        public override void show()
        {
            Console.WriteLine("B");
            Console.ReadLine();
        }
    }

    class C : B
    {
        public new void show()
        {
            Console.WriteLine("C");
            Console.ReadLine();
        }
    }
    class D : A
    {
        public new void show()
        {
            Console.WriteLine("D");
            Console.ReadLine();
        }
    }

    class DemoOverride
    {
        public static void Main()
        {
            A a1 = new A();
            a1.show();//A
            B b1 = new B();
            b1.show();//B
            C c1 = new C();
            c1.show();//C
            D d1 = new D();
            d1.show();//D
            A a2 = new B();
            a2.show();//B
            A a3 = new C();
            a3.show();//B
            B b3 = new C();
            b3.show();//B
            A a4 = new D();
            a4.show();//A

        }
    }
}

	
	
	10.this parameter declaration will be on static methods only.
	using System;
class Program
    {
        public static int i = 0;
        public static void Main()
        {
            (i++).Assign();
        }
    }
 
    static class Extensions
    {
        public static void Assign(this int i)
        {
            Console.WriteLine(Program.i);
            Console.WriteLine(i);
        }
    }
	
	
	
	
	11.// Out key word cant be used to change the change the modification value.
	public static void Main(string[] args)
        {
            int i = 3;
            int j = 2;

            func1(ref i);
            func2(out j);
            Console.WriteLine(i + " " + j);
        }

        static void func1(ref int num)
        {
            num = num + num;
        }
        static void func2(out int num)
        {
            //num = num * num; This is Error.
			num =5;
        }
		
		
		12.using System;
public class Program
    {
        public static void Main(string[] args)
        {
            try
            {
                Console.WriteLine("TechBeamers Welcomes Its Readers");
                Environment.Exit(0);
            }
            finally
            {
                Console.WriteLine("To the World of C# !!");
            }
        }
     }
	 o/p:-TechBeamers Welcomes Its Readers
	 
	 13.using System;
public class Program
    {
        static void Main(string[] args)
        {
            Derived d = new Derived();
            int i = 10;
            d.Func(i);
            Console.ReadKey();
        }
    }
    public class Base
    {
        public virtual void Func(int x)
        {
            Console.WriteLine("Base.Func(int)");
        }
    }
    public class Derived : Base
    {
        public override void Func(int x)
        {
            Console.WriteLine("Derived.Func(int)");
        }
        public void Func(object o)
        {
            Console.WriteLine("Derived.Func(object)");
        }
    }
	
	//o.p:-Derived.Func(object)
	
	
	
	14.using System;
class Program
    {
        public static void Main()
        {
            Sample s = new Sample();
            s.Print();
 
            ISample i = s;
            i.Print();
        }
 
        public interface ISample
        {
            void Print(string val = "Interface Executed");
        }
 
        public class Sample : ISample
        {
            public void Print(string val = "Class Executed")
            {
                Console.WriteLine(val);
            }
        }
    }
	
	o/p:- Class Executed
     Interface Executed
	 
	 
	15.  static void Main(string[] args)
    {
        float num = 56, div = 0;

        try
        {
            float a = num / div;
            Console.WriteLine(a);
        }
        catch (DivideByZeroException)
        {
            Console.WriteLine("Division By Zero");
        }
        Console.ReadKey();
    }
	o/p:-infinity